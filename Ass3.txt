-- Table Creation
CREATE TABLE Department (
    dept_id INT AUTO_INCREMENT PRIMARY KEY,
    dept_name VARCHAR(100) NOT NULL UNIQUE,
    location VARCHAR(50)
);

CREATE TABLE Employee (
    emp_id INT AUTO_INCREMENT PRIMARY KEY,
    emp_name VARCHAR(100) NOT NULL,
    emp_salary DECIMAL(10, 2) CHECK (emp_salary >= 30000),
    dept_id INT,
    hire_date DATE DEFAULT CURRENT_DATE,
    CONSTRAINT fk_dept FOREIGN KEY (dept_id) REFERENCES Department(dept_id) ON DELETE SET NULL
);

CREATE TABLE Project (
    proj_id INT AUTO_INCREMENT PRIMARY KEY,
    proj_name VARCHAR(100) NOT NULL,
    dept_id INT,
    CONSTRAINT fk_proj_dept FOREIGN KEY (dept_id) REFERENCES Department(dept_id)
);

CREATE TABLE Employee_Project (
    emp_id INT,
    proj_id INT,
    hours_worked INT,
    CONSTRAINT fk_emp FOREIGN KEY (emp_id) REFERENCES Employee(emp_id),
    CONSTRAINT fk_proj FOREIGN KEY (proj_id) REFERENCES Project(proj_id),
    PRIMARY KEY (emp_id, proj_id)
);


-- Sample Data
INSERT INTO Department (dept_name, location) VALUES ('HR', 'New York'), ('Engineering', 'San Francisco'), ('Sales', 'Chicago');

INSERT INTO Employee (emp_name, emp_salary, dept_id) VALUES 
('Alice', 50000, 1), ('Bob', 60000, 2), ('Charlie', 55000, 3), ('David', 70000, 2);

INSERT INTO Project (proj_name, dept_id) VALUES 
('Recruitment System', 1), ('AI Development', 2), ('Sales Dashboard', 3);

INSERT INTO Employee_Project (emp_id, proj_id, hours_worked) VALUES 
(1, 1, 20), (2, 2, 30), (3, 3, 25), (2, 3, 40), (4, 2, 35);


select * from Department;
select * from Employee;
select * from Project;
select * from Employee_Project;

-- 10 SQL Queries Demonstrating Joins, Subqueries, and Views
-- 1. Inner Join: Retrieve all employees along with their department name.

SELECT emp_name, dept_name
FROM Employee
JOIN Department ON Employee.dept_id = Department.dept_id;

-- 2. Left Join: List all departments along with the employees assigned to each department, including departments with no employees.
SELECT dept_name, emp_name
FROM Department
LEFT JOIN Employee ON Department.dept_id = Employee.dept_id;

-- 3. Right Join: Retrieve all employees and, if assigned, the projects they are working on.
SELECT emp_name, proj_name, hours_worked
FROM Employee
RIGHT JOIN Employee_Project ON Employee.emp_id = Employee_Project.emp_id
RIGHT JOIN Project ON Employee_Project.proj_id = Project.proj_id;


-- 4. Full Outer Join (Using UNION): Retrieve all employees and their respective projects, including employees without projects and projects without employees.
SELECT emp_name, proj_name, hours_worked
FROM Employee
LEFT JOIN Employee_Project ON Employee.emp_id = Employee_Project.emp_id
LEFT JOIN Project ON Employee_Project.proj_id = Project.proj_id

UNION

SELECT emp_name, proj_name, hours_worked
FROM Employee
RIGHT JOIN Employee_Project ON Employee.emp_id = Employee_Project.emp_id
RIGHT JOIN Project ON Employee_Project.proj_id = Project.proj_id;

-- 5. Self Join: Find pairs of employees who work in the same department.
SELECT e1.emp_name AS Employee1, e2.emp_name AS Employee2, d.dept_name
FROM Employee e1
JOIN Employee e2 ON e1.dept_id = e2.dept_id AND e1.emp_id != e2.emp_id
JOIN Department d ON e1.dept_id = d.dept_id;

-- 6. Subquery: Retrieve employees who earn more than the average salary in their department.
SELECT emp_name, emp_salary, dept_name
FROM Employee
JOIN Department ON Employee.dept_id = Department.dept_id
WHERE emp_salary > (
    SELECT AVG(emp_salary)
    FROM Employee AS e
    WHERE e.dept_id = Employee.dept_id
);


-- 7. Correlated Subquery: List employees whose salary is higher than the average salary of the company.
SELECT emp_name, emp_salary
FROM Employee
WHERE emp_salary > (SELECT AVG(emp_salary) FROM Employee);

-- 8. View Creation: Create a view to show employee project hours.
CREATE VIEW EmployeeProjectHours AS
SELECT emp_name, proj_name, hours_worked
FROM Employee
JOIN Employee_Project ON Employee.emp_id = Employee_Project.emp_id
JOIN Project ON Employee_Project.proj_id = Project.proj_id;

-- 9. Querying the View: Use the view EmployeeProjectHours to retrieve employees working on projects for more than 25 hours.
SELECT emp_name, proj_name, hours_worked
FROM EmployeeProjectHours
WHERE hours_worked > 25;

-- 10. IN and NOT IN Subquery: Find employees who are not assigned to any project.
SELECT emp_name
FROM Employee
WHERE emp_id NOT IN (SELECT emp_id FROM Employee_Project);




