-- 1.Creating Tables with Constraints

CREATE TABLE Department (
    dept_id INT AUTO_INCREMENT PRIMARY KEY,
    dept_name VARCHAR(100) NOT NULL UNIQUE,
    location VARCHAR(50)
);

CREATE TABLE Employee (
    emp_id INT AUTO_INCREMENT PRIMARY KEY,
    emp_name VARCHAR(100) NOT NULL,
    emp_salary DECIMAL(10, 2) CHECK (emp_salary >= 30000),
    dept_id INT,
    hire_date DATE DEFAULT CURRENT_DATE,
    CONSTRAINT fk_dept FOREIGN KEY (dept_id) REFERENCES Department(dept_id) ON DELETE SET NULL
);

-- 2. Creating an Index
CREATE INDEX idx_emp_salary ON Employee(emp_salary);

-- 3.Creating a View
CREATE VIEW DeptEmployeeCount AS
SELECT Department.dept_name, COUNT(Employee.emp_id) AS employee_count
FROM Department
LEFT JOIN Employee ON Department.dept_id = Employee.dept_id
GROUP BY Department.dept_name;

-- 4.Simulating a Sequence
CREATE TABLE Sequence (
    seq_val INT NOT NULL AUTO_INCREMENT,
    PRIMARY KEY (seq_val)
);

-- Getting the next sequence value
INSERT INTO Sequence VALUES (NULL);
SELECT LAST_INSERT_ID() AS NextSequenceValue;

-- 5. Synonym (Alias) Creation
CREATE VIEW EmployeeAlias AS SELECT * FROM Employee;

-- Part B: SQL DML Queries
-- Insert Data into Department Table

INSERT INTO Department (dept_name, location) VALUES ('Human Resources', 'New York');
INSERT INTO Department (dept_name, location) VALUES ('Engineering', 'San Francisco');
INSERT INTO Department (dept_name, location) VALUES ('Sales', 'Chicago');

select * from Department;

-- Insert Data into Employee Table
INSERT INTO Employee (emp_name, emp_salary, dept_id) VALUES ('Alice', 50000, 1);
INSERT INTO Employee (emp_name, emp_salary, dept_id) VALUES ('Bob', 45000, 2);
INSERT INTO Employee (emp_name, emp_salary, dept_id) VALUES ('Charlie', 55000, 3);

select * from Employee;

-- Update Employee Salary Increase salary by 10% for employees in the Engineering department.
UPDATE Employee 
SET emp_salary = emp_salary * 1.10 
WHERE dept_id = (SELECT dept_id FROM Department WHERE dept_name = 'Engineering');

select emp_salary from Employee where dept_id=2;

-- Delete an Employee Record Delete an employee with the name ‘Charlie’.
DELETE FROM Employee WHERE emp_name = 'Charlie';

select * from Employee;

-- Retrieve All Employees in a Specific Department Retrieve all employees in the Engineering department.
SELECT * FROM Employee 
WHERE dept_id = (SELECT dept_id FROM Department WHERE dept_name = 'Engineering');

-- List Employees and Their Departments Retrieve employee names along with their department names.
SELECT emp_name, dept_name 
FROM Employee 
JOIN Department ON Employee.dept_id = Department.dept_id;

-- Find Highest Salary Find the employee with the highest salary.
SELECT emp_name, emp_salary 
FROM Employee 
ORDER BY emp_salary DESC 
LIMIT 1;

-- Count Employees in Each Department Using the view to get the employee count in each department.
SELECT * FROM DeptEmployeeCount;

-- Calculate Average Salary by Department Calculate the average salary of employees for each department.
SELECT dept_name, AVG(emp_salary) AS avg_salary
FROM Employee 
JOIN Department ON Employee.dept_id = Department.dept_id
GROUP BY dept_name;

-- List Departments without Employees Find departments that have no employees assigned.

SELECT dept_name 
FROM Department 
WHERE dept_id NOT IN (SELECT dept_id FROM Employee);










